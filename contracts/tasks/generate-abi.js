const { task } = require('hardhat/config');
const fs = require('fs-extra');
const path = require('path');

task('generate-abi', 'Generate ABI from contract').setAction(
    async (taskArgs, hre) => {
        console.log('开始生成ABI文件...');
        const contractsToGenerate = [
            // { contractName: 'Voting', contractFile: 'Voting' },
            { contractName: 'VotingV2', contractFile: 'VotingV2' },
        ];

        const outputDir = '../frontend/src/contracts/abi'; // 前端项目中的 ABI 输出目录

        for (const config of contractsToGenerate) {
            await generateAbiFile({
                artifacts: hre.config.paths.artifacts,
                outputDir,
                contractName: config.contractName,
                contractFile: config.contractFile,
            });
        }
    }
);

/**
 * 将 ABI 转换为 Human-Readable 字符串数组
 * @param {Array} abi - 合约 ABI
 * @returns {string[]}
 */
function formatAbiToHumanReadable(abi) {
    return abi.map((item) => {
        switch (item.type) {
            case 'function':
                let sig = `function ${item.name}(${formatInputs(
                    item.inputs
                )}) ${item.stateMutability}`;
                if (
                    item.stateMutability === 'view' ||
                    item.stateMutability === 'pure'
                ) {
                    sig += ` returns (${formatOutputs(item.outputs)})`;
                }
                return sig.trim();

            case 'event':
                const eventInputs = item.inputs
                    .map((i) => {
                        let input = `${i.type} ${i.name || ''}`;
                        if (i.indexed) input += ' indexed';
                        return input.trim();
                    })
                    .join(', ');
                return `event ${item.name}(${eventInputs})`;

            case 'constructor':
                const inputs = item.inputs
                    .map((i) => `${i.type} ${i.name || ''}`)
                    .join(', ');
                return `constructor(${inputs}) ${item.stateMutability}`;

            default:
                return `${item.type} ${item.name || ''}`.trim();
        }
    });
}

function formatInputs(inputs) {
    return (inputs || []).map((i) => `${i.type} ${i.name || ''}`).join(', ');
}

function formatOutputs(outputs) {
    return (outputs || []).map((o) => `${o.type} ${o.name || ''}`).join(', ');
}

/**
 * 生成 ABI JS 文件
 * @param {Object} params
 * @param {string} params.artifacts - Hardhat artifacts 路径
 * @param {string} params.outputDir - 输出目录
 * @param {string} params.contractName - 合约名
 * @param {string} params.contractFile - 合约文件名（可选）
 */
async function generateAbiFile({
    artifacts,
    outputDir,
    contractName,
    contractFile = contractName,
}) {
    const artifactPath = path.join(
        artifacts,
        'contracts',
        `${contractFile}.sol`,
        `${contractName}.json`
    );

    try {
        await fs.access(artifactPath);
    } catch (err) {
        console.warn(`⚠️  合约构建产物未找到: ${artifactPath}`);
        return;
    }

    const artifact = await fs.readJson(artifactPath);
    const abiStrings = formatAbiToHumanReadable(artifact.abi);

    const outputFile = path.join(outputDir, `${contractName}ABI.js`);
    const abiFile = path.join(outputDir, `${contractName}ABI.json`);
    const content = `
    /**
     * ${contractName} ABI (Human-Readable Format)
     * Auto-generated by scripts/generate-abi.js
     */
    export const ${contractName.toUpperCase()}_ABI = ${JSON.stringify(
        abiStrings,
        null,
        2
    )};
    `.trim();
    const contractJson = JSON.parse(fs.readFileSync(artifactPath, 'utf8'));
    const abi = contractJson.abi;
    await fs.ensureDir(outputDir);
    await fs.writeFile(outputFile, content);
    await fs.mkdirSync(path.dirname(abiFile), { recursive: true });
    await fs.writeFileSync(abiFile, JSON.stringify(abi, null, 2));
    console.log(`✅ 生成合约ABI文件: ${outputFile}`);
}
